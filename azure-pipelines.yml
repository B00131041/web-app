trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '4a01d2e9-19e1-417c-847c-6036aee46263'
  imageRepository: 'bwebapp'
  containerRegistry: 'ca2registry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

  # Environment variable for application
  PORT: '3000'

stages:
  - stage: Build
    displayName: Build and Push Stage
    jobs:
      - job: Build
        displayName: Build Docker Image and Push to ACR
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and Push Docker Image to Container Registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy to Azure Container Instances (ACI)
    dependsOn: Build  # Ensures this stage runs after the Build stage
    jobs:
      - job: Deploy
        displayName: Deploy Docker Image to ACI
        pool:
          vmImage: $(vmImageName)  # Use the same VM image as the Build stage
        steps:
          # Step 1: Login to Azure
          - task: AzureCLI@2
            displayName: Login to Azure
            inputs:
              azureSubscription: $(dockerRegistryServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az login --service-principal -u $(azureSubscription) -p $(AZURE_SECRET) --tenant $(AZURE_TENANT_ID)

          # Step 2: Deploy Docker Container to ACI
          - task: AzureCLI@2
            displayName: Deploy Docker Container to Azure Container Instances (ACI)
            inputs:
              azureSubscription: $(dockerRegistryServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az container create \
                  --resource-group myResourceGroup \  # Replace with your resource group name
                  --name bwebapp-container \  # The name of the ACI instance
                  --image $(containerRegistry)/$(imageRepository):$(tag) \  # Pull the image from ACR
                  --dns-name-label bwebapp-container \  # DNS name for the ACI instance
                  --ports 80 \  # Expose port 80
                  --environment-variables PORT=$(PORT) \  # Pass environment variables
                  --registry-login-server $(containerRegistry) \
                  --registry-username $(dockerRegistryServiceConnection) \
                  --registry-password $(AZURE_CONTAINER_REGISTRY_PASSWORD)